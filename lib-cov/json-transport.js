/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['json-transport.js']) {
  _$jscoverage['json-transport.js'] = [];
  _$jscoverage['json-transport.js'][1] = 0;
  _$jscoverage['json-transport.js'][3] = 0;
  _$jscoverage['json-transport.js'][4] = 0;
  _$jscoverage['json-transport.js'][5] = 0;
  _$jscoverage['json-transport.js'][6] = 0;
  _$jscoverage['json-transport.js'][7] = 0;
  _$jscoverage['json-transport.js'][8] = 0;
  _$jscoverage['json-transport.js'][9] = 0;
  _$jscoverage['json-transport.js'][11] = 0;
  _$jscoverage['json-transport.js'][17] = 0;
  _$jscoverage['json-transport.js'][18] = 0;
  _$jscoverage['json-transport.js'][19] = 0;
  _$jscoverage['json-transport.js'][20] = 0;
  _$jscoverage['json-transport.js'][23] = 0;
  _$jscoverage['json-transport.js'][24] = 0;
  _$jscoverage['json-transport.js'][25] = 0;
  _$jscoverage['json-transport.js'][26] = 0;
  _$jscoverage['json-transport.js'][27] = 0;
  _$jscoverage['json-transport.js'][28] = 0;
  _$jscoverage['json-transport.js'][31] = 0;
  _$jscoverage['json-transport.js'][32] = 0;
  _$jscoverage['json-transport.js'][34] = 0;
  _$jscoverage['json-transport.js'][35] = 0;
  _$jscoverage['json-transport.js'][36] = 0;
  _$jscoverage['json-transport.js'][37] = 0;
  _$jscoverage['json-transport.js'][38] = 0;
  _$jscoverage['json-transport.js'][40] = 0;
  _$jscoverage['json-transport.js'][41] = 0;
  _$jscoverage['json-transport.js'][44] = 0;
  _$jscoverage['json-transport.js'][46] = 0;
  _$jscoverage['json-transport.js'][47] = 0;
  _$jscoverage['json-transport.js'][49] = 0;
  _$jscoverage['json-transport.js'][52] = 0;
  _$jscoverage['json-transport.js'][53] = 0;
  _$jscoverage['json-transport.js'][55] = 0;
  _$jscoverage['json-transport.js'][56] = 0;
  _$jscoverage['json-transport.js'][59] = 0;
  _$jscoverage['json-transport.js'][60] = 0;
  _$jscoverage['json-transport.js'][61] = 0;
  _$jscoverage['json-transport.js'][63] = 0;
  _$jscoverage['json-transport.js'][64] = 0;
  _$jscoverage['json-transport.js'][65] = 0;
  _$jscoverage['json-transport.js'][66] = 0;
  _$jscoverage['json-transport.js'][67] = 0;
  _$jscoverage['json-transport.js'][69] = 0;
  _$jscoverage['json-transport.js'][70] = 0;
  _$jscoverage['json-transport.js'][71] = 0;
  _$jscoverage['json-transport.js'][74] = 0;
  _$jscoverage['json-transport.js'][75] = 0;
  _$jscoverage['json-transport.js'][76] = 0;
  _$jscoverage['json-transport.js'][79] = 0;
  _$jscoverage['json-transport.js'][81] = 0;
  _$jscoverage['json-transport.js'][83] = 0;
  _$jscoverage['json-transport.js'][84] = 0;
  _$jscoverage['json-transport.js'][86] = 0;
  _$jscoverage['json-transport.js'][87] = 0;
  _$jscoverage['json-transport.js'][89] = 0;
  _$jscoverage['json-transport.js'][92] = 0;
  _$jscoverage['json-transport.js'][95] = 0;
  _$jscoverage['json-transport.js'][96] = 0;
  _$jscoverage['json-transport.js'][98] = 0;
  _$jscoverage['json-transport.js'][99] = 0;
  _$jscoverage['json-transport.js'][101] = 0;
  _$jscoverage['json-transport.js'][102] = 0;
  _$jscoverage['json-transport.js'][103] = 0;
  _$jscoverage['json-transport.js'][104] = 0;
  _$jscoverage['json-transport.js'][106] = 0;
  _$jscoverage['json-transport.js'][107] = 0;
  _$jscoverage['json-transport.js'][112] = 0;
  _$jscoverage['json-transport.js'][113] = 0;
  _$jscoverage['json-transport.js'][114] = 0;
  _$jscoverage['json-transport.js'][115] = 0;
}
_$jscoverage['json-transport.js'][1]++;
var url = require("url");
_$jscoverage['json-transport.js'][3]++;
module.exports = (function (server, options) {
  _$jscoverage['json-transport.js'][4]++;
  options = (options !== null && options !== undefined && options.constructor === Object)? options: {};
  _$jscoverage['json-transport.js'][5]++;
  options.indent = (typeof options.indent !== "string" && options.indent !== false)? "   ": options.indent;
  _$jscoverage['json-transport.js'][6]++;
  options.domain = ! options.domain || typeof options.domain !== "string"? ".default.lan": options.domain;
  _$jscoverage['json-transport.js'][7]++;
  options.standardHeaders = options.standardHeaders? options.standardHeaders: {};
  _$jscoverage['json-transport.js'][8]++;
  options.standardHeaders["access-control-allow-origin"] = options.standardHeaders["access-control-allow-origin"] || "*" + options.domain;
  _$jscoverage['json-transport.js'][9]++;
  options.standardHeaders["access-control-allow-headers"] = options.standardHeaders["access-control-allow-headers"] || "X-Requested-With";
  _$jscoverage['json-transport.js'][11]++;
  var iframeHtmlTemplate = ["<!doctype html><html><head><meta http-equiv=\"Content-Type\" content=\"text/html charset=utf-8\"/><script type=\"text/javascript\">document.domain = \"" + options.domain + "\"parent.", "(", ")</script></head><body></body></html>"];
  _$jscoverage['json-transport.js'][17]++;
  return (function (request, response, next) {
  _$jscoverage['json-transport.js'][18]++;
  response.serveJSON = serveResponse.bind(null, request, response);
  _$jscoverage['json-transport.js'][19]++;
  response.streamJSON = startResponseStream.bind(null, request, response);
  _$jscoverage['json-transport.js'][20]++;
  next && next();
});
  _$jscoverage['json-transport.js'][23]++;
  function normalizeParams(params) {
    _$jscoverage['json-transport.js'][24]++;
    params = params || {};
    _$jscoverage['json-transport.js'][25]++;
    params.headers = params.headers || {};
    _$jscoverage['json-transport.js'][26]++;
    params.httpStatusCode = isNaN(params.httpStatusCode)? 200: params.httpStatusCode;
    _$jscoverage['json-transport.js'][27]++;
    params.httpStatusMessage = params.httpStatusMessage || "";
    _$jscoverage['json-transport.js'][28]++;
    return params;
}
  _$jscoverage['json-transport.js'][31]++;
  function serveResponse(request, response, json, params) {
    _$jscoverage['json-transport.js'][32]++;
    params = normalizeParams(params);
    _$jscoverage['json-transport.js'][34]++;
    if (json !== undefined) {
      _$jscoverage['json-transport.js'][35]++;
      if (request.querystring.callback) {
        _$jscoverage['json-transport.js'][36]++;
        if (request.method === "POST") {
          _$jscoverage['json-transport.js'][37]++;
          params.headers["content-type"] = "text/html";
          _$jscoverage['json-transport.js'][38]++;
          json = iframeHtmlTemplate[0] + request.querystring.callback + iframeHtmlTemplate[1] + JSON.stringify(json) + iframeHtmlTemplate[2];
        }
        else {
          _$jscoverage['json-transport.js'][40]++;
          params.headers["content-type"] = "text/javascript";
          _$jscoverage['json-transport.js'][41]++;
          json = request.querystring.callback + "(" + JSON.stringify(json, null, options.indentationString) + ")";
        }
        _$jscoverage['json-transport.js'][44]++;
        json = json.replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
      }
      else {
        _$jscoverage['json-transport.js'][46]++;
        params.headers["content-type"] = "application/json";
        _$jscoverage['json-transport.js'][47]++;
        json = JSON.stringify(json, null, options.indentationString);
      }
      _$jscoverage['json-transport.js'][49]++;
      params.headers["content-length"] = Buffer.byteLength(json, "utf8");
    }
    _$jscoverage['json-transport.js'][52]++;
    fillObject(params.headers, options.standardHeaders);
    _$jscoverage['json-transport.js'][53]++;
    params.headers["content-type"] += "; charset=UTF-8";
    _$jscoverage['json-transport.js'][55]++;
    response.writeHead(params.httpStatusCode, params.httpStatusMessage, params.headers);
    _$jscoverage['json-transport.js'][56]++;
    response.end(json, "utf8");
}
  _$jscoverage['json-transport.js'][59]++;
  function startResponseStream(request, response, json, params) {
    _$jscoverage['json-transport.js'][60]++;
    params = normalizeParams(params);
    _$jscoverage['json-transport.js'][61]++;
    response.streamJSON = writeResponseStream.bind(null, request, response);
    _$jscoverage['json-transport.js'][63]++;
    if (request.querystring.callback) {
      _$jscoverage['json-transport.js'][64]++;
      if (request.method === "POST") {
        _$jscoverage['json-transport.js'][65]++;
        params.headers["content-type"] = "text/html";
        _$jscoverage['json-transport.js'][66]++;
        response.streamStartChunk = iframeHtmlTemplate[0] + request.querystring.callback + iframeHtmlTemplate[1] + "[";
        _$jscoverage['json-transport.js'][67]++;
        response.streamEndChunk = "]" + iframeHtmlTemplate[2];
      }
      else {
        _$jscoverage['json-transport.js'][69]++;
        params.headers["content-type"] = "text/javascript";
        _$jscoverage['json-transport.js'][70]++;
        response.streamStartChunk = request.querystring.callback + "([";
        _$jscoverage['json-transport.js'][71]++;
        response.streamEndChunk = "])";
      }
    }
    else {
      _$jscoverage['json-transport.js'][74]++;
      params.headers["content-type"] = "text/javascript";
      _$jscoverage['json-transport.js'][75]++;
      response.streamStartChunk = "[";
      _$jscoverage['json-transport.js'][76]++;
      response.streamEndChunk = "]";
    }
    _$jscoverage['json-transport.js'][79]++;
    fillObject(params.headers, options.standardHeaders);
    _$jscoverage['json-transport.js'][81]++;
    params.headers["content-type"] += "; charset=UTF-8";
    _$jscoverage['json-transport.js'][83]++;
    response.writeHead(params.httpStatusCode, params.httpStatusMessage, params.headers);
    _$jscoverage['json-transport.js'][84]++;
    response.write(response.streamStartChunk, "utf8");
    _$jscoverage['json-transport.js'][86]++;
    if (json === undefined) {
      _$jscoverage['json-transport.js'][87]++;
      response.end(response.streamEndChunk, "utf8");
    }
    else {
      _$jscoverage['json-transport.js'][89]++;
      response.lastResponseChunk = json;
    }
    _$jscoverage['json-transport.js'][92]++;
    delete response.streamStartChunk;
}
  _$jscoverage['json-transport.js'][95]++;
  function writeResponseStream(request, response, json) {
    _$jscoverage['json-transport.js'][96]++;
    var responseChunk = JSON.stringify(response.lastResponseChunk, null, options.indentationString);
    _$jscoverage['json-transport.js'][98]++;
    if (request.querystring.callback) {
      _$jscoverage['json-transport.js'][99]++;
      responseChunk = responseChunk.replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
    }
    _$jscoverage['json-transport.js'][101]++;
    if (json !== undefined) {
      _$jscoverage['json-transport.js'][102]++;
      responseChunk += ",\n";
      _$jscoverage['json-transport.js'][103]++;
      response.write(responseChunk, "utf8");
      _$jscoverage['json-transport.js'][104]++;
      response.lastResponseChunk = json;
    }
    else {
      _$jscoverage['json-transport.js'][106]++;
      response.write(responseChunk, "utf8");
      _$jscoverage['json-transport.js'][107]++;
      response.end(response.streamEndChunk, "utf8");
    }
}
});
_$jscoverage['json-transport.js'][112]++;
function fillObject(targetObj, fillObj) {
  _$jscoverage['json-transport.js'][113]++;
  Object.keys(fillObj).forEach((function (key) {
  _$jscoverage['json-transport.js'][114]++;
  if (! targetObj.hasOwnProperty(key)) {
    _$jscoverage['json-transport.js'][115]++;
    targetObj[key] = fillObj[key];
  }
}));
}
_$jscoverage['json-transport.js'].source = ["var url = require('url')","","module.exports = function (server, options) {","  options = (options !== null &amp;&amp; options !== undefined &amp;&amp; options.constructor === Object) ? options : {}","  options.indent = (typeof options.indent !== 'string' &amp;&amp; options.indent !== false) ? '   ' : options.indent","  options.domain = !options.domain || typeof options.domain !== 'string' ? '.default.lan' : options.domain","  options.standardHeaders = options.standardHeaders ? options.standardHeaders : {}","  options.standardHeaders['access-control-allow-origin'] = options.standardHeaders['access-control-allow-origin'] || '*' + options.domain","  options.standardHeaders['access-control-allow-headers'] = options.standardHeaders['access-control-allow-headers'] || 'X-Requested-With'","","  var iframeHtmlTemplate = [","    '&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html charset=utf-8\"/&gt;&lt;script type=\"text/javascript\"&gt;document.domain = \"' + options.domain + '\"parent.',","    '(',","    ')&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;'","  ]","","  return function (request, response, next) {","    response.serveJSON = serveResponse.bind(null, request, response)","    response.streamJSON = startResponseStream.bind(null, request, response)","    next &amp;&amp; next()","  }","","  function normalizeParams (params) {","    params = params || {}","    params.headers = params.headers || {}","    params.httpStatusCode = isNaN(params.httpStatusCode) ? 200 : params.httpStatusCode","    params.httpStatusMessage = params.httpStatusMessage || ''","    return params;","  }","","  function serveResponse(request, response, json, params) {","    params = normalizeParams(params)","","    if (json !== undefined) {","      if (request.querystring.callback) {","        if (request.method === 'POST') {","          params.headers['content-type'] = 'text/html'","          json = iframeHtmlTemplate[0] + request.querystring.callback + iframeHtmlTemplate[1] + JSON.stringify(json) + iframeHtmlTemplate[2]","        } else {","          params.headers['content-type'] = 'text/javascript'","          json = request.querystring.callback + '(' + JSON.stringify(json, null, options.indentationString) + ')'","        }","        // JSON parse vs eval fix. https://github.com/rack/rack-contrib/pull/37","        json = json.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029')","      } else {","        params.headers['content-type'] = 'application/json'","        json = JSON.stringify(json, null, options.indentationString)","      }","      params.headers['content-length'] = Buffer.byteLength(json, 'utf8')","    }","","    fillObject(params.headers, options.standardHeaders)","    params.headers['content-type'] += '; charset=UTF-8'","","    response.writeHead(params.httpStatusCode, params.httpStatusMessage, params.headers)","    response.end(json, 'utf8')","  }","","  function startResponseStream(request, response, json, params) {","    params = normalizeParams(params)","    response.streamJSON = writeResponseStream.bind(null, request, response)","","    if (request.querystring.callback) {","      if (request.method === 'POST') {","        params.headers['content-type'] = 'text/html'","        response.streamStartChunk = iframeHtmlTemplate[0] + request.querystring.callback + iframeHtmlTemplate[1] + '['","        response.streamEndChunk = ']' + iframeHtmlTemplate[2]","      } else {","        params.headers['content-type'] = 'text/javascript'","        response.streamStartChunk = request.querystring.callback + '(['","        response.streamEndChunk = '])'","      }","    } else {","      params.headers['content-type'] = 'text/javascript'","      response.streamStartChunk = '['","      response.streamEndChunk = ']'","    }","","    fillObject(params.headers, options.standardHeaders)","","    params.headers['content-type'] += '; charset=UTF-8'","","    response.writeHead(params.httpStatusCode, params.httpStatusMessage, params.headers)","    response.write(response.streamStartChunk, 'utf8')","","    if (json === undefined) {","      response.end(response.streamEndChunk, 'utf8')","    } else {","      response.lastResponseChunk = json","    }","","    delete response.streamStartChunk","  }","","  function writeResponseStream(request, response, json) {","    var responseChunk = JSON.stringify(response.lastResponseChunk, null, options.indentationString)","    // JSON parse vs eval fix. https://github.com/rack/rack-contrib/pull/37","    if (request.querystring.callback) {","      responseChunk = responseChunk.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029')","    }","    if (json !== undefined) {","      responseChunk += ',\\n'","      response.write(responseChunk, 'utf8')","      response.lastResponseChunk = json","    } else {","      response.write(responseChunk, 'utf8')","      response.end(response.streamEndChunk, 'utf8')","    }","  }","}","","function fillObject (targetObj, fillObj) {","  Object.keys(fillObj).forEach(function (key) {","    if (!targetObj.hasOwnProperty(key)) {","      targetObj[key] = fillObj[key]","    }","  })","}"];
